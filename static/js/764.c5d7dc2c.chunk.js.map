{"version":3,"file":"static/js/764.c5d7dc2c.chunk.js","mappings":"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","sources":["pages/Movies.js","services/movies-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport moviesAPI from '../services/movies-api';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n\n  const normalaziedMovies = movies => {\n    return movies.map(({ id, title, poster_path }) => ({\n      id,\n      title,\n      poster_path,\n    }));\n  };\n\n  const onSearchSubmit = e => {\n    e.preventDefault();\n    const searchQuery = e.currentTarget.searchQuery.value.trim();\n    if (searchQuery === '') {\n      return toast.error('Fill in the search field');\n    }\n\n    if (searchQuery === searchParams.get('query')) {\n      toast.success('Movies on your serchquery are already loaded');\n    }\n    setSearchParams({ query: searchQuery });\n    e.currentTarget.reset();\n  };\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) {\n      return;\n    }\n    moviesAPI\n      .getMoviesByQuery(query)\n      .then(({ data: { results, total_results } }) => {\n        if (total_results === 0) {\n          toast.error('There are no movies on your searchquery');\n          setSearchParams({});\n          setMovies([]);\n          return;\n        }\n        setMovies(normalaziedMovies(results));\n      })\n      .catch(error => console.log(error));\n  }, [searchParams, setSearchParams]);\n\n  return (\n    <>\n      <form onSubmit={onSearchSubmit}>\n        <button type=\"submit\">search</button>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </form>\n\n      <p>{searchParams.get('query')}</p>\n      <ul className=\"movies-gallery\">\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nconst API_KEY = '5436fbaf6b3dd7d125e5fbc4adba788b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function getTrendMovies() {\n  const data = await axios.get(\n    `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`\n  );\n  return data;\n}\n\nasync function getMovieById(id) {\n  const data = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=en-US`\n  );\n  return data;\n}\n\nasync function getMovieCredits(id) {\n  const data = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n}\n\nasync function getMovieReviews(id) {\n  const data = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n}\n\nasync function getMoviesByQuery(query) {\n  const data = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return data;\n}\nconst api = {\n  getTrendMovies,\n  getMovieById,\n  getMovieCredits,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n\nexport default api;\n"],"names":["location","useLocation","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","useEffect","query","get","moviesAPI","then","data","results","total_results","toast","map","id","title","poster_path","normalaziedMovies","catch","error","console","log","onSubmit","e","preventDefault","searchQuery","currentTarget","value","trim","reset","type","name","autoFocus","placeholder","className","to","state","from","src","alt","API_KEY","BASE_URL","getTrendMovies","axios","getMovieById","getMovieCredits","getMovieReviews","getMoviesByQuery","api"],"sourceRoot":""}