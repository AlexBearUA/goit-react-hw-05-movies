{"version":3,"file":"static/js/847.4a963a82.chunk.js","mappings":"sMAoDA,UAhDqB,WAAO,IAAD,IACjBA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC3D,GAGIC,EAAAA,EAAAA,UAAS,IAHb,sBACIC,EADJ,EACIA,eAAgBC,EADpB,EACoBA,YAAaC,EADjC,EACiCA,aAAcC,EAD/C,EAC+CA,SAAUC,EADzD,EACyDA,OACvDC,EAFF,KAYA,OAPAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,aACgBhB,GACbiB,MAAK,SAAAC,GAAK,OAAIJ,EAASI,EAAb,IACVC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACpB,KAGF,iCACE,SAAC,KAAD,CAAMuB,GAAInB,EAAoBoB,QAA9B,sBACA,wBAAKf,KACL,gBACEgB,IAAG,yCAAoCf,GACvCgB,IAAKjB,KAEP,uCAAeE,MACf,sCAAcC,MACd,mCAEGC,GACCA,EAAOc,QAAO,SAACC,EAAcC,GAC3B,OAAOD,EAAe,IAAMC,EAAMC,IACnC,GAAE,QAGP,2BACE,yBACE,SAAC,KAAD,CAAMP,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAQ,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,8FCnDKC,EAAoB,SAAAC,GACxB,OAAOA,EAAOC,KAAI,kBAAiC,CACjDC,GADgB,EAAGA,GAEnBC,MAFgB,EAAOA,MAGvB3B,YAHgB,EAAcA,YAAd,GAKnB,EAEK4B,EAAmB,SAAC,GAAD,MAMlB,CAAE7B,eANgB,EACvBA,eAKuBC,YANA,EAEvBA,YAIoCG,OANb,EAGvBA,OAG4CF,aANrB,EAIvBA,aAE0DC,SANnC,EAKvBA,SALuB,EAQnB2B,EAAqB,SAAAC,GACzB,OAAOA,EAAQL,KACb,kBAA4D,CAC1DM,cADF,EAAGA,cAEDC,UAFF,EAAkBA,UAGhBC,aAHF,EAA6BA,aAI3BC,UAJF,EAA2CA,UAA3C,GAOH,EAEKC,EAAqB,SAAAC,GACzB,OAAOA,EAAQX,KAAI,kBAA8B,CAC/CY,OADiB,EAAGA,OAEpBC,QAFiB,EAAWA,QAG5BZ,GAHiB,EAAoBA,GAApB,GAKpB,ECzBKa,EAAU,mCACVC,EAAW,+BAEFC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,sGAGYC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,wCAAqDD,IAHjE,uBAEYI,EAFZ,EAEIC,KAAQD,QAFZ,kBAISpB,EAAkBoB,IAJ3B,kEAOeE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,6FAGYJ,EAAAA,EAAAA,IAAA,UACLF,EADK,iCAC4BD,EAD5B,wCACmEO,IAJ/E,2BAEIF,KAAQD,EAFZ,EAEYA,QAASI,EAFrB,EAEqBA,cAFrB,kBAMS,CAAEvB,OAAQD,EAAkBoB,GAAUK,aAAcD,IAN7D,kEASeE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BvB,GAA5B,yFACyBgB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAd,EADA,oBACca,EADd,8CADzB,uBACUK,EADV,EACUA,KADV,kBAIShB,EAAiBgB,IAJ1B,kEAOeM,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BxB,GAA/B,yFAGYgB,EAAAA,EAAAA,IAAA,UACLF,EADK,kBACad,EADb,4BACmCa,EADnC,oBAHZ,uBAEYY,EAFZ,EAEIP,KAAQO,KAFZ,kBAOStB,EAAmBsB,IAP5B,kEAUeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+B1B,GAA/B,yFAGYgB,EAAAA,EAAAA,IAAA,UACLF,EADK,kBACad,EADb,4BACmCa,EADnC,oBAHZ,uBAEYI,EAFZ,EAEIC,KAAQD,QAFZ,kBAOSR,EAAmBQ,IAP5B,kEAUA,IAAMU,EAAM,CACVZ,eA9CF,WAEeA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA6CbQ,aAtCF,SAS4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA8BbC,gBA9BF,SAO+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAwBbE,gBAxBF,SAU+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAebP,iBAhDF,SAOgC,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GA4Cf,G","sources":["pages/MovieDetails.js","services/helpers.js","services/movies-api.js"],"sourcesContent":["import { useParams, useLocation, Link, Outlet } from 'react-router-dom';\nimport { useEffect, useRef, Suspense, useState } from 'react';\nimport moviesAPI from '../services/movies-api';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  const [\n    { original_title, poster_path, vote_average, overview, genres },\n    setMovie,\n  ] = useState([]);\n\n  useEffect(() => {\n    moviesAPI\n      .getMovieById(movieId)\n      .then(movie => setMovie(movie))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Go back</Link>\n      <h2>{original_title}</h2>\n      <img\n        src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n        alt={original_title}\n      />\n      <p>User score {vote_average}</p>\n      <p>Overview: {overview}</p>\n      <p>\n        Genres:\n        {genres &&\n          genres.reduce((resultString, genre) => {\n            return resultString + ' ' + genre.name;\n          }, '')}\n      </p>\n\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\nexport default MovieDetails;\n","const normalaziedMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n\nconst normalaziedMovie = ({\n  original_title,\n  poster_path,\n  genres,\n  vote_average,\n  overview,\n}) => ({ original_title, poster_path, genres, vote_average, overview });\n\nconst normalaziedCredits = credits => {\n  return credits.map(\n    ({ original_name, character, profile_path, credit_id }) => ({\n      original_name,\n      character,\n      profile_path,\n      credit_id,\n    })\n  );\n};\n\nconst normalaziedReviews = reviews => {\n  return reviews.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n};\n\nexport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n};\n","import axios from 'axios';\nimport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n} from '../services/helpers';\n\nconst API_KEY = '5436fbaf6b3dd7d125e5fbc4adba788b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function getTrendMovies() {\n  const {\n    data: { results },\n  } = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return normalaziedMovies(results);\n}\n\nasync function getMoviesByQuery(query) {\n  const {\n    data: { results, total_results },\n  } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return { movies: normalaziedMovies(results), totalResults: total_results };\n}\n\nasync function getMovieById(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=en-US`\n  );\n  return normalaziedMovie(data);\n}\n\nasync function getMovieCredits(id) {\n  const {\n    data: { cast },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedCredits(cast);\n}\n\nasync function getMovieReviews(id) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedReviews(results);\n}\n\nconst api = {\n  getTrendMovies,\n  getMovieById,\n  getMovieCredits,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n\nexport default api;\n"],"names":["movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useState","original_title","poster_path","vote_average","overview","genres","setMovie","useEffect","moviesAPI","then","movie","catch","error","console","log","to","current","src","alt","reduce","resultString","genre","name","Suspense","fallback","normalaziedMovies","movies","map","id","title","normalaziedMovie","normalaziedCredits","credits","original_name","character","profile_path","credit_id","normalaziedReviews","reviews","author","content","API_KEY","BASE_URL","getTrendMovies","axios","results","data","getMoviesByQuery","query","total_results","totalResults","getMovieById","getMovieCredits","cast","getMovieReviews","api"],"sourceRoot":""}