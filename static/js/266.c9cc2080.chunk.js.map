{"version":3,"file":"static/js/266.c9cc2080.chunk.js","mappings":"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","sources":["pages/Home.js","services/helpers.js","services/movies-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport moviesAPI from '../services/movies-api';\n\nconst Home = () => {\n  const location = useLocation();\n  const [trendMovies, setTrendMovies] = useState([]);\n\n  useEffect(() => {\n    moviesAPI\n      .getTrendMovies()\n      .then(movies => setTrendMovies(movies))\n      .catch(error => console.log(error));\n  }, []);\n\n  return (\n    <div>\n      <h1>The most popular of last week</h1>\n      <ul className=\"movies-gallery\">\n        {trendMovies.map(({ id, title, poster_path }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\nexport default Home;\n","const normalaziedMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n\nconst normalaziedMovie = ({\n  original_title,\n  poster_path,\n  genres,\n  vote_average,\n  overview,\n}) => ({ original_title, poster_path, genres, vote_average, overview });\n\nconst normalaziedCredits = credits => {\n  return credits.map(\n    ({ original_name, character, profile_path, credit_id }) => ({\n      original_name,\n      character,\n      profile_path,\n      credit_id,\n    })\n  );\n};\n\nconst normalaziedReviews = reviews => {\n  return reviews.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n};\n\nexport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n};\n","import axios from 'axios';\nimport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n} from '../services/helpers';\n\nconst API_KEY = '5436fbaf6b3dd7d125e5fbc4adba788b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function getTrendMovies() {\n  const {\n    data: { results },\n  } = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return normalaziedMovies(results);\n}\n\nasync function getMoviesByQuery(query) {\n  const {\n    data: { results, total_results },\n  } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return { movies: normalaziedMovies(results), totalResults: total_results };\n}\n\nasync function getMovieById(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=en-US`\n  );\n  return normalaziedMovie(data);\n}\n\nasync function getMovieCredits(id) {\n  const {\n    data: { cast },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedCredits(cast);\n}\n\nasync function getMovieReviews(id) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedReviews(results);\n}\n\nconst api = {\n  getTrendMovies,\n  getMovieById,\n  getMovieCredits,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n\nexport default api;\n"],"names":["location","useLocation","useState","trendMovies","setTrendMovies","useEffect","moviesAPI","then","movies","catch","error","console","log","className","map","id","title","poster_path","to","state","from","src","alt","normalaziedMovies","normalaziedMovie","original_title","genres","vote_average","overview","normalaziedCredits","credits","original_name","character","profile_path","credit_id","normalaziedReviews","reviews","author","content","API_KEY","BASE_URL","getTrendMovies","axios","results","data","getMoviesByQuery","query","total_results","totalResults","getMovieById","getMovieCredits","cast","getMovieReviews","api"],"sourceRoot":""}