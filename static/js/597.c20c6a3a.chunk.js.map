{"version":3,"file":"static/js/597.c20c6a3a.chunk.js","mappings":"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","sources":["components/Cast.jsx","services/helpers.js","services/movies-api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport moviesAPI from '../services/movies-api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    moviesAPI\n      .getMovieCredits(movieId)\n      .then(credits =>\n        setCredits(credits.filter(credit => credit.profile_path))\n      )\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <ul className=\"actors-gallery\">\n      {credits\n        .slice(0, 15)\n        .map(({ original_name, character, profile_path, credit_id }) => {\n          return (\n            <li className=\"actors-gallery-item\" key={credit_id}>\n              <>\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                  alt={original_name}\n                />\n                <p className=\"actor-info\">{original_name}</p>\n                <p className=\"actor-info\">{character}</p>\n              </>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default Cast;\n","const normalaziedMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n\nconst normalaziedMovie = ({\n  original_title,\n  poster_path,\n  genres,\n  vote_average,\n  overview,\n}) => ({ original_title, poster_path, genres, vote_average, overview });\n\nconst normalaziedCredits = credits => {\n  return credits.map(\n    ({ original_name, character, profile_path, credit_id }) => ({\n      original_name,\n      character,\n      profile_path,\n      credit_id,\n    })\n  );\n};\n\nconst normalaziedReviews = reviews => {\n  return reviews.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n};\n\nexport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n};\n","import axios from 'axios';\nimport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n} from '../services/helpers';\n\nconst API_KEY = '5436fbaf6b3dd7d125e5fbc4adba788b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function getTrendMovies() {\n  const {\n    data: { results },\n  } = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return normalaziedMovies(results);\n}\n\nasync function getMoviesByQuery(query) {\n  const {\n    data: { results, total_results },\n  } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return { movies: normalaziedMovies(results), totalResults: total_results };\n}\n\nasync function getMovieById(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=en-US`\n  );\n  return normalaziedMovie(data);\n}\n\nasync function getMovieCredits(id) {\n  const {\n    data: { cast },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedCredits(cast);\n}\n\nasync function getMovieReviews(id) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedReviews(results);\n}\n\nconst api = {\n  getTrendMovies,\n  getMovieById,\n  getMovieCredits,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n\nexport default api;\n"],"names":["movieId","useParams","useState","credits","setCredits","useEffect","moviesAPI","then","filter","credit","profile_path","catch","error","console","log","className","slice","map","original_name","character","credit_id","src","alt","normalaziedMovies","movies","id","title","poster_path","normalaziedMovie","original_title","genres","vote_average","overview","normalaziedCredits","normalaziedReviews","reviews","author","content","API_KEY","BASE_URL","getTrendMovies","axios","results","data","getMoviesByQuery","query","total_results","totalResults","getMovieById","getMovieCredits","cast","getMovieReviews","api"],"sourceRoot":""}