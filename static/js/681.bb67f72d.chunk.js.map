{"version":3,"file":"static/js/681.bb67f72d.chunk.js","mappings":"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","sources":["components/Reviews.jsx","services/helpers.js","services/movies-api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport moviesAPI from '../services/movies-api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    moviesAPI\n      .getMovieReviews(movieId)\n      .then(reviews => setReviews(reviews))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul className=\"actors-gallery\">\n          {reviews.map(({ author, content, id }) => {\n            return (\n              <li key={id}>\n                <p>{author}</p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className=\"no-info\">We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","const normalaziedMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n\nconst normalaziedMovie = ({\n  original_title,\n  poster_path,\n  genres,\n  vote_average,\n  overview,\n}) => ({ original_title, poster_path, genres, vote_average, overview });\n\nconst normalaziedCredits = credits => {\n  return credits.map(\n    ({ original_name, character, profile_path, credit_id }) => ({\n      original_name,\n      character,\n      profile_path,\n      credit_id,\n    })\n  );\n};\n\nconst normalaziedReviews = reviews => {\n  return reviews.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n};\n\nexport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n};\n","import axios from 'axios';\nimport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n} from '../services/helpers';\n\nconst API_KEY = '5436fbaf6b3dd7d125e5fbc4adba788b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function getTrendMovies() {\n  const {\n    data: { results },\n  } = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return normalaziedMovies(results);\n}\n\nasync function getMoviesByQuery(query) {\n  const {\n    data: { results, total_results },\n  } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return { movies: normalaziedMovies(results), totalResults: total_results };\n}\n\nasync function getMovieById(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=en-US`\n  );\n\n  return normalaziedMovie(data);\n}\n\nasync function getMovieCredits(id) {\n  const {\n    data: { cast },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedCredits(cast);\n}\n\nasync function getMovieReviews(id) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedReviews(results);\n}\n\nconst api = {\n  getTrendMovies,\n  getMovieById,\n  getMovieCredits,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n\nexport default api;\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","moviesAPI","then","catch","error","console","log","length","className","map","author","content","id","normalaziedMovies","movies","title","poster_path","normalaziedMovie","original_title","genres","vote_average","overview","normalaziedCredits","credits","original_name","character","profile_path","credit_id","normalaziedReviews","API_KEY","BASE_URL","getTrendMovies","axios","results","data","getMoviesByQuery","query","total_results","totalResults","getMovieById","getMovieCredits","cast","getMovieReviews","api"],"sourceRoot":""}