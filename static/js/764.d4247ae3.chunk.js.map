{"version":3,"file":"static/js/764.d4247ae3.chunk.js","mappings":"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","sources":["pages/Movies.js","services/helpers.js","services/movies-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport moviesAPI from '../services/movies-api';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n\n  const onSearchSubmit = e => {\n    e.preventDefault();\n    const searchQuery = e.currentTarget.searchQuery.value.trim();\n    if (searchQuery === '') {\n      return toast.error('Fill in the search field');\n    }\n\n    if (searchQuery === searchParams.get('query')) {\n      toast.success('Movies on your serchquery are already loaded');\n    }\n    setSearchParams({ query: searchQuery });\n    e.currentTarget.reset();\n  };\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) {\n      return;\n    }\n    moviesAPI\n      .getMoviesByQuery(query)\n      .then(({ movies, totalResults }) => {\n        if (totalResults === 0) {\n          toast.error('There are no movies on your searchquery');\n          setSearchParams({});\n          setMovies([]);\n          return;\n        }\n        setMovies(movies);\n      })\n      .catch(error => console.log(error));\n  }, [searchParams, setSearchParams]);\n\n  return (\n    <>\n      <form onSubmit={onSearchSubmit}>\n        <button type=\"submit\">search</button>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </form>\n\n      <p>{searchParams.get('query')}</p>\n      <ul className=\"movies-gallery\">\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nexport default Movies;\n","const normalaziedMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n\nconst normalaziedMovie = ({\n  original_title,\n  poster_path,\n  genres,\n  vote_average,\n  overview,\n}) => ({ original_title, poster_path, genres, vote_average, overview });\n\nconst normalaziedCredits = credits => {\n  return credits.map(\n    ({ original_name, character, profile_path, credit_id }) => ({\n      original_name,\n      character,\n      profile_path,\n      credit_id,\n    })\n  );\n};\n\nconst normalaziedReviews = reviews => {\n  return reviews.map(({ author, content, id }) => ({\n    author,\n    content,\n    id,\n  }));\n};\n\nexport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n};\n","import axios from 'axios';\nimport {\n  normalaziedMovies,\n  normalaziedMovie,\n  normalaziedCredits,\n  normalaziedReviews,\n} from '../services/helpers';\n\nconst API_KEY = '5436fbaf6b3dd7d125e5fbc4adba788b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function getTrendMovies() {\n  const {\n    data: { results },\n  } = await axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n  return normalaziedMovies(results);\n}\n\nasync function getMoviesByQuery(query) {\n  const {\n    data: { results, total_results },\n  } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n  );\n  return { movies: normalaziedMovies(results), totalResults: total_results };\n}\n\nasync function getMovieById(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=en-US`\n  );\n  return normalaziedMovie(data);\n}\n\nasync function getMovieCredits(id) {\n  const {\n    data: { cast },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedCredits(cast);\n}\n\nasync function getMovieReviews(id) {\n  const {\n    data: { results },\n  } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return normalaziedReviews(results);\n}\n\nconst api = {\n  getTrendMovies,\n  getMovieById,\n  getMovieCredits,\n  getMovieReviews,\n  getMoviesByQuery,\n};\n\nexport default api;\n"],"names":["location","useLocation","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","useEffect","query","get","moviesAPI","then","totalResults","toast","catch","error","console","log","onSubmit","e","preventDefault","searchQuery","currentTarget","value","trim","reset","type","name","autoFocus","placeholder","className","map","id","title","poster_path","to","state","from","src","alt","normalaziedMovies","normalaziedMovie","original_title","genres","vote_average","overview","normalaziedCredits","credits","original_name","character","profile_path","credit_id","normalaziedReviews","reviews","author","content","API_KEY","BASE_URL","getTrendMovies","axios","results","data","getMoviesByQuery","total_results","getMovieById","getMovieCredits","cast","getMovieReviews","api"],"sourceRoot":""}